<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>偶数求和</title>
      <link href="/2022/11/10/%E5%81%B6%E6%95%B0%E6%B1%82%E5%92%8C/"/>
      <url>/2022/11/10/%E5%81%B6%E6%95%B0%E6%B1%82%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="偶数求和"><a href="#偶数求和" class="headerlink" title="偶数求和"></a>偶数求和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有一个长度为n(n&lt;&#x3D;100)的数列，该数列定义为从2开始的递增有序偶数，现在要求你按照顺序每m个数求出一个平均值，如果最后不足m个，则以实际数量求平均值。编程输出该平均值序列。</p><p>输入<br>输入数据有多组，每组占一行，包含两个正整数n和m，n和m的含义如上所述。程序读入n&#x3D;0，m&#x3D;0时停止。<br>输出<br>对于每组输入数据，输出一个平均值序列，每组输出占一行。</p><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><pre><code>#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;void average(int n, int m) &#123;int u = (n/m)*m;int v = 2*((n/m)*m+1);if (n % m == 0) &#123;    int x = 0;    for (int i = 2,j=1; i &lt;= 2 * n; i += 2,j++) &#123;        x += i;        if (j % m == 0) &#123;            cout &lt;&lt; x / m &lt;&lt;&quot; &quot;;            x = 0;        &#125;    &#125;&#125;if (n % m != 0) &#123;    int x = 0;    for (int i = 2, j = 1; j&lt;=u; i += 2, j++) &#123;        x += i;        if (j % m == 0) &#123;            cout &lt;&lt; x / m &lt;&lt; &quot; &quot;;            x = 0;        &#125;    &#125;    int y = 0;    for (int h = 1; h &lt;= n - (n / m) * m; h++, v += 2) &#123;        y += v;        if (h % (n - (n / m) * m) == 0) &#123;            cout &lt;&lt; y / (n - (n / m) * m) &lt;&lt; &quot; &quot;;        &#125;    &#125;&#125;&#125;int main() &#123;int n, m;while (cin &gt;&gt; n &gt;&gt; m) &#123;    if (n == 0 &amp;&amp; m == 0) &#123;        break;    &#125;    average(n, m);    cout &lt;&lt; endl;&#125;return 0;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>求平均成绩</title>
      <link href="/2022/11/10/%E6%B1%82%E5%B9%B3%E5%9D%87%E6%88%90%E7%BB%A9/"/>
      <url>/2022/11/10/%E6%B1%82%E5%B9%B3%E5%9D%87%E6%88%90%E7%BB%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="求平均成绩"><a href="#求平均成绩" class="headerlink" title="求平均成绩"></a>求平均成绩</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p> 假设一个班有n(n&lt;&#x3D;50)个学生，每人考m(m&lt;&#x3D;5)门课，求每个学生的平均成绩和每门课的平均成绩，并输出各科成绩均大于等于平均成绩的学生数量。<br> 输入<br> 每组输入数据有一个测试实例，每个测试实例的第一行包括两个整数n和m，分别表示学生数和课程数。然后是n行数据，每行包括m个整数（即：考试分数）。<br> 输出<br> 对于每个测试实例，输出3行数据，第一行包含n个数据，表示n个学生的平均成绩，结果保留两位小数；第二行包含m个数据，表示m门课的平均成绩，结果保留两位小数；第三行是一个整数，表示该班级中各科成绩均大于等于平均成绩的学生数量。</p><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><pre><code>#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;iomanip&gt;using namespace std;int main()&#123;double n, m;int k = 0;double a[100][100];double c[100] = &#123; 0 &#125;;double b[100] = &#123; 0 &#125;;cin &gt;&gt; n &gt;&gt; m;for (int i = 0; i &lt; n; i++)&#123;    for (int j = 0; j &lt; m; j++)    &#123;        cin &gt;&gt; a[i][j];    &#125;&#125;for (int i = 0; i &lt; n; i++)&#123;    for (int j = 0; j &lt; m; j++)    &#123;        b[i] += a[i][j];    &#125;    cout &lt;&lt;fixed&lt;&lt; setprecision(2) &lt;&lt; b[i] / m &lt;&lt; &quot; &quot;;&#125;cout&lt;&lt;endl;for (int i = 0; i &lt; n; i++)&#123;    for (int j = 0; j &lt; m; j++)    &#123;        c[i] += a[j][i];    &#125;    cout &lt;&lt;fixed&lt;&lt;setprecision(2)&lt;&lt; c[i] / n &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;for (int i = 0; i &lt; n; i++)&#123;    int h = 1;    for (int j = 0; j &lt; m; j++)    &#123;        if (a[i][j] &gt;= (c[i] / n)) &#123; h++; &#125;    &#125;    if (h == m) &#123; k++; &#125;&#125;cout &lt;&lt; k-1 &lt;&lt; endl;return 0;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二进制回文</title>
      <link href="/2022/11/10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9B%9E%E6%96%87/"/>
      <url>/2022/11/10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9B%9E%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="二进制回文"><a href="#二进制回文" class="headerlink" title="二进制回文"></a>二进制回文</h1><p>  如果一个十进制数转换为二进制后是回文的，则这个数称为二进制回文数。飞飞对二进制回文数十分感兴趣，他想请你帮他判断一个数字是否是二进制回文数。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>   第一行输入一个整数T表示样例个数，第二行输入是十进制数字n，表示需要判断的数字。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>   如果n是二进制回文数，则输出一行“Yes”，否则输出一行“No”。</p><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><pre><code>#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;algorithm&gt;using namespace std;string huiwen(int n)&#123;string r,s;while (n != 0) &#123;    r += (n % 2 == 0 ? &quot;0&quot; : &quot;1&quot;);    n /= 2;&#125;s = r;reverse(r.begin(), r.end());if (r == s) &#123; return &quot;Yes&quot;; &#125;else return &quot;No&quot;;&#125;int main() &#123;int n; cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;    int x;    string result;    cin &gt;&gt; x;    result =huiwen(x);    cout &lt;&lt; result &lt;&lt; endl;&#125;return 0;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>红警之王</title>
      <link href="/2022/11/10/%E7%BA%A2%E8%AD%A6%E4%B9%8B%E7%8E%8B/"/>
      <url>/2022/11/10/%E7%BA%A2%E8%AD%A6%E4%B9%8B%E7%8E%8B/</url>
      
        <content type="html"><![CDATA[<p>cover: </p><h1 id="红警之王"><a href="#红警之王" class="headerlink" title="红警之王"></a>红警之王</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>  红警是一款经典的即时战略游戏，MFC爱玩红警到了痴迷的程度！<br>  一天晚上，MFC打红警到凌晨2点，恍惚之间他发现自己进入了红警的世界，他现在的身份是一个一星动员兵！<br>  在一场遭遇战中，他来到了“冷酷的敌人”的基地，对于他来说，他面前有N个建筑，每个建筑有四种属性，分别是 类型、生命值、x坐标、y坐标。<br>  动员兵MFC被玩家指定了攻击顺序，他必须按照读入的顺序依次推倒每个建筑，具体来说：<br>  MFC初始位于坐标(0,0)处，初始攻击力为30，首先它将以1单位每秒的速度移动到建筑的位置，之后他将每秒对建筑造成等同于他当前攻击力的伤害，当建筑物生命值降到0时，建筑物被摧毁，MFC将前去摧毁下一个建筑，直到所有建筑被摧毁，MFC将获得胜利。<br>  值得注意的是，当MFC摧毁3座建筑后，他会升至二星并拥有40攻击力。当他再摧毁5座建筑后，他会升至三星并拥有55攻击力。星级提升不会影响他的移动速度，坐标间距离的计算方式采用欧几里得距离，即两点之间的最短线段长度，移动带来的时间消耗向下取整。<br>  MFC想知道，他将在多少秒后完成任务。</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><pre><code>#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cmath&gt;using namespace std;struct red2&#123;string name;int hp;int codex;int codey;&#125;;void tim(int hp[],int codex[],int codey [], int n) &#123;int x = 0, y = 0, fig = 30;int tim = 0;for (int i = 0; i &lt; n; i++) &#123;    tim += sqrt(((codex[i] - x) * (codex[i] - x) + (codey[i] - y) * (codey[i] - y)));    if (hp[i] % fig == 0) &#123; tim += hp[i] / fig; &#125;    else if(hp[i]%fig!=0)&#123; tim += hp[i] / fig+1; &#125;    if (i == 2) &#123; fig = 40; &#125;    if (i == 7) &#123; fig = 55; &#125;    x = codex[i]; y = codey[i];&#125;cout &lt;&lt; tim &lt;&lt; endl;&#125;int main() &#123;red2 target [100];int hp[100],codex[100],codey[100];int n; cin &gt;&gt; n;for (int i = 0; i &lt; n; i++) &#123;    cin &gt;&gt; target[i].name;    cin &gt;&gt; target[i].hp; hp[i] = target[i].hp;    cin &gt;&gt; target[i].codex; codex[i] = target[i].codex;    cin &gt;&gt; target[i].codey; codey[i] = target[i].codey;&#125;tim(hp, codex, codey, n);return 0;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
